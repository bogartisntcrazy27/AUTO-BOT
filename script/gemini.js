let fontEnabled = true;

function formatFont(text) {
  const fontMapping = {
    a: "ùñ∫", b: "ùñª", c: "ùñº", d: "ùñΩ", e: "ùñæ", f: "ùñø", g: "ùóÄ", h: "ùóÅ", i: "ùóÇ", j: "ùóÉ", k: "ùóÑ", l: "ùóÖ", m: "ùóÜ",
    n: "ùóá", o: "ùóà", p: "ùóâ", q: "ùóä", r: "ùóã", s: "ùóå", t: "ùóç", u: "ùóé", v: "ùóè", w: "ùóê", x: "ùóë", y: "ùóí", z: "ùóì",
    A: "ùñ†", B: "ùñ°", C: "ùñ¢", D: "ùñ£", E: "ùñ§", F: "ùñ•", G: "ùñ¶", H: "ùñß", I: "ùñ®", J: "ùñ©", K: "ùñ™", L: "ùñ´", M: "ùñ¨",
    N: "ùñ≠", O: "ùñÆ", P: "ùñØ", Q: "ùñ∞", R: "ùñ±", S: "ùñ≤", T: "ùñ≥", U: "ùñ¥", V: "ùñµ", W: "ùñ∂", X: "ùñ∑", Y: "ùñ∏", Z: "ùñπ"
  };

  let formattedText = "";
  for (const char of text) {
    if (fontEnabled && char in fontMapping) {
      formattedText += fontMapping[char];
    } else {
      formattedText += char;
    }
  }

  return formattedText;
}

const axios = require('axios');

module.exports.config = {
  name: "gemini",
  role: 0,
  credits: "developer",
  description: "Interact with Gemini",
  hasPrefix: false,
  version: "1.0.0",
  aliases: ["gemi"],
  usage: "gemini [prompt or reply to photo]"
};

module.exports.run = async function({ api, event, args }) {
  const prompt = args.join(" ");
  const userUid = event.senderID;

  if (!prompt && (!event.messageReply || event.messageReply.attachments[0]?.type !== "photo")) {
    return api.sendMessage(formatFont('‚ùå | Please provide a prompt or reply to a photo.'), event.threadID, (err, info) => {
      setTimeout(() => api.unsendMessage(info.messageID), 2000);
    }, event.messageID);
  }

  let fileUrl = '';
  if (event.messageReply && event.messageReply.attachments[0]?.type === "photo") {
    fileUrl = encodeURIComponent(event.messageReply.attachments[0].url);
  }

  try {
    const apiUrl = `https://rest-api-production-5054.up.railway.app/gemini?prompt=${encodeURIComponent(prompt)}&model=gemini-1.5-flash&uid=${userUid}` + (fileUrl ? `&file_url=${fileUrl}` : '');

    const response = await axios.get(apiUrl);
    const description = response.data.message;

    return api.sendMessage(formatFont(description), event.threadID, event.messageID);
  } catch (error) {
    return api.sendMessage(formatFont('‚ùå | An error occurred while processing your request.'), event.threadID, event.messageID);
  }
};
